unit UClass;

interface

uses Generics.Collections;
{ This unit contains all the class definitions that are used across multiple units }

type

  TDomain = class
  private
    DID, PID, DRID: integer;
    // id's for domain, project and domain registrar
    dName, dExten: string;
    rDate: TDate;
    rCost: real;
  public
    property DomainID: integer read DID;
    property ProjectID: integer read PID;
    property DomainRegistrarID: integer read DRID;
    property DomainName: string read dName;
    property DomainExtension: string read dExten;
    property RenewalDate: TDate read rDate;
    property RenewalCost: real read rCost;
    constructor Create(DID,PID,DRID:integer;dName,dExten:string;rDate:TDate;rCost:real);
  end;

  THosting = class
  private
    HID, PID, DID, HRID: integer;
    // id's for hosting, project, domain and hosting registrar
    rDate: TDate;
    rCost: real;
    Domain: TDomain;
    Server, EncUser, EncPass: string; // encuser and encpass are encrypted
    Port: integer;
  public
    property HostingID: integer read HID;
    property ProjectID: integer read PID;
    property DomainID: integer read DID;
    property HostRegistrarID: integer read HRID;
    property RenewalDate: TDate read rDate;
    property RenewalCost: real read rCost;
    property FTPServer: string read Server;
    property FTPUsername: String read EncUser;
    property FTPPassword: string read EncPass;
    property FTPPort: integer read Port;
    constructor Create();
  end;

  TProject = class
  private
    PID, CID: integer;
    pName: string;
  public
    DomainList:TObjectList<TDomain>;
    HostingList:TObjectList<THosting>;
    property ClientID: integer read CID;
    property ProjectID: integer read PID;
    property Name: string read pName;
    constructor Create(PID,CID:integer;pName:string);
  end;

var
  CurrentProject:TProject;

implementation

  constructor TDomain.Create(DID: Integer; PID: Integer; DRID: Integer; dName: string; dExten: string; rDate: TDate; rCost: Real);
  begin
    self.DID := DID;
    self.PID := PID;
    self.DRID := DRID;
    self.dName := dName;
    self.dExten := dExten;
    self.rDate := rDate;
    self.rCost := rCost;
  end;

  constructor TProject.Create(PID: Integer; CID: Integer; pName: string);
  begin
    self.PID := PID;
    self.CID := CID;
    self.pName := pName;
  end;
end.
