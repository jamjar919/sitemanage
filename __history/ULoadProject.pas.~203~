unit ULoadProject;

interface

uses
  Vcl.Forms, Dialogs, Winapi.Windows, Winapi.Messages, System.SysUtils,
  System.Variants, System.Classes, System.UITypes,
  Data.DB, Data.Win.ADODB, Vcl.StdCtrls, Vcl.Controls, Vcl.DBCtrls, Graphics,
  UData, UClass, UMain;

type
  TformLoadProject = class(TForm)
    dbcomboProject: TDBLookupComboBox;
    buttonLoadProject: TButton;
    tadodsetLoadProject: TADODataSet;
    tadodsourceProjectData: TDataSource;
    procedure buttonLoadProjectClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
  private
    { Private declarations }
  public
    function LoadProject(ProjectName: string): TProject;
  end;

var
  formLoadProject: TformLoadProject;

implementation

{$R *.dfm}

function TformLoadProject.LoadProject(ProjectName: string): TProject;
var
  Project: TProject;
  Host: THosting;
  Domain: TDomain;
  ProjectID, ClientID: integer;
begin
  // get project data from the database
  dbcomboProject.ListField := '';
  dbcomboProject.KeyField := '';
  // needs to be wiped to prevent it trying to fetch additional data
  with tadodsetLoadProject do
  begin
    Close;
    CommandText :=
      'SELECT `ProjectID`,`ClientID` FROM project WHERE `ProjectName` = "' +
      ProjectName + '";';
    Open;
    ProjectID := FieldValues['ProjectID'];
    ClientID := FieldValues['ClientID'];
    // load the project into a new memory object
    Project := TProject.Create(ProjectID, ClientID, ProjectName);
    { Close;
      CommandText :=
      'SELECT COUNT(*) AS `Count` FROM `domain` WHERE `ProjectID` = ' +
      inttostr(ProjectID) +
      ' UNION SELECT COUNT( * ) FROM `hosting` WHERE `ProjectID` = ' +
      inttostr(ProjectID) + ';';
      Open;
      NumDomains := FieldValues['Count'];
      Next;
      NumHosting := FieldValues['Count']; }
    // old code for countingdomain/host no
    // select domain details
    Close;
    CommandText := 'SELECT * FROM `domain` WHERE ProjectID = ' +
      inttostr(Project.ProjectID) + ';';
    Open;
    First;
    // get domain data and add it to the project list
    while (not EOF) do
    begin
      Project.DomainList.Add(TDomain.Create(FieldValues['DomainID'],
        FieldValues['ProjectID'], FieldValues['DomainRegistrarID'],
        FieldValues['DomainName'], FieldValues['DomainExtension'],
        FieldValues['RenewalDate'], FieldValues['RenewalCost']));
      Next;
    end; // ENDWHILE
    // select hosting details
    Close;
    CommandText := 'SELECT * FROM `hosting` WHERE ProjectID = ' +
      inttostr(Project.ProjectID) + ';';
    Open;
    First;
    // get hosting data and add it to the project list
    while (not EOF) do
    begin
      Project.HostingList.Add(THosting.Create(FieldValues['HostingID'],
        FieldValues['ProjectID'], FieldValues['DomainID'],
        FieldValues['HostRegistrarID'], FieldValues['RenewalDate'],
        FieldValues['RenewalCost'], FieldValues['FTPServer'],
        FieldValues['FTPUsername'], FieldValues['FTPPassword'],
        FieldValues['FTPPort']));
      Next;
    end; // ENDWHILE
  end; // ENDWITH
  //find out which domains are unassigned
  for Host in Project.HostingList do


  result := Project;
end;

procedure TformLoadProject.buttonLoadProjectClick(Sender: TObject);
var
  PName: string;
begin
  // get data from combobox
  PName := dbcomboProject.Text;
  if PName <> '' then // check a project was selected
  begin
    CurrentProject := LoadProject(PName);
    formLoadProject.Hide;
    formMain.displayProjectOnTree(CurrentProject);
  end
  else
    MessageDlg('Please select a valid project.', mtError, [mbOk], 0);
end;

procedure TformLoadProject.FormShow(Sender: TObject);
begin
  // reset combobox
  with tadodsetLoadProject do
  begin
    Close;
    CommandText := 'SELECT * FROM project;';
    Open;
  end;
  dbcomboProject.ListField := 'ProjectName';
  dbcomboProject.KeyField := 'ProjectName';
end;

end.
